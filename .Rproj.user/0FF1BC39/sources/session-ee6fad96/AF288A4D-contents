---
title: "Resampling"
subtitle: ""
author: "Daniel Kick"
date: "2023-11-13"
image: ""
categories: 
  - beginner
  - intermediate
  - code
freeze: true
---



```{r}
library(readxl)    # read xlsxs
library(tidyverse) # 
library(broom)     # Produce summary tables with tidy
library(multcomp)  # Post hoc tests
library(tictoc)    # Time resampling cycles

file_path <- './FIXME.xlsx'

sheets <- excel_sheets(file_path)
sheet = sheets[2]
iter = 100
M <- read_excel(file_path, sheet = sheet)


resample_anova <- function(M, iter, about = T){
  if(about){print('Assuming first three columns are FIXME, FIXME, response variable.\nThe first list entry will always be the observed model.')}
  M <- M[, 1:3]                  # FIXME
  response_var <- names(M)[3]    # FIXME
  # set as factor for glht       # FIXME
  M$FIXME <- as.factor(M$FIXME)  # FIXME
  M$FIXME <- as.factor(M$FIXME)  # FIXME
  
  res <- list()
  
  pb = txtProgressBar(min = 0, max = iter, initial = 0, style = 3, char = 'â–ˆ')
  for(i in seq(1, iter)){
    if( i == 1 ){
      fm <- lm(paste(response_var, '~ FIXME * FIXME'), data = M)      
    } else {
      fm <- lm(paste('sample(', response_var, ') ~ FIXME * FIXME'), data = M)
    }
    res[[i]] <- fm
    setTxtProgressBar(pb,i)
  }
  close(pb)
  return(res)
}

fm_list <- resample_anova(M, iter = 100, about = F)
table_list <- map(fm_list, tidy)

table_stats <- as.data.frame( 
  do.call(
    rbind, 
    map(table_list, function(x){x$statistic})
    ) 
  )
names(table_stats) <- as.character(unlist(table_list[[1]]['term']))

```


```{r}
# get empirical p values
calc_ep <- function(obs, sim, tails){
  if (tails == 1){
    # one tailed
    if(obs > mean(sim)){
      ep = mean(sim >= obs)
    } else {
      ep = mean(sim <= obs)
    }
    
  } else if (tails == 2){
    # two tailed
    ep = mean(abs(sim) >= abs(obs))  
  } else {
    print('tails must be 1 or 2')
    ep = NA
  }
  return(ep)
}

eps = map(names(table_stats), function(x, tails = 2){
  obs = table_stats[1, x]
  sim = table_stats[, x]
  
  return(calc_ep(obs, sim, tails = tails))

})

eps = data.frame(Effect = names(table_stats), Empirical.P = unlist(eps))
eps
```



```{r}
# visualize
plot_shaded_dist <- function(table_stats, name, tails = 2){
  # fix names for ggplot aestics lookup 
  names(table_stats) <- str_replace_all(names(table_stats), ':', '_x_')
  name <- str_replace_all(name, ':', '_x_')
  
  obs = table_stats[1, name]
  
  ep = calc_ep(obs = obs, sim = table_stats[, name], tails = tails)
  
  dens <- density(table_stats[, name])
  dens <- data.frame(x = dens$x, y = dens$y)
  
  if (tails == 1){
    if(obs > mean(dens$x)){
      dens <- dens[dens$x >= obs, ]
    } else {
      dens <- dens[dens$x <= obs, ]
    }
  } else if (tails == 2){
    if(obs > mean(dens$x)){
      dens_above <- dens[dens$x >= obs, ]
      dens_below <- dens[dens$x <= -1*obs, ]
    } else {
      dens_above <- dens[dens$x >= -1*obs, ]
      dens_below <- dens[dens$x <= obs, ]
    }
  }
  
  plt <- ggplot(table_stats)+
    geom_density(aes_string(x=name), fill = 'steelblue', color = 'black')+
    theme_minimal()+
    labs(title = paste('Empirical Statistic Distribution: ', name, collapse = ''),
         subtitle = paste('Empirical p Value: ', as.character(ep), collapse = ''))
    
  if (tails == 1){
  plt <- plt +
    geom_ribbon(data = dens, aes(x = x, ymin = 0, ymax = y), fill = 'firebrick')
  
  } else if (tails == 2){
  plt <- plt +
    geom_ribbon(data = dens_above, aes(x = x, ymin = 0, ymax = y), fill = 'firebrick')+
    geom_ribbon(data = dens_below, aes(x = x, ymin = 0, ymax = y), fill = 'firebrick')
  
  }
  plt <- plt+geom_density(aes_string(x=name), fill = NA, color = 'black')
  return(plt)  
}

plot_shaded_dist(table_stats, name = 'FIXME', tails = 2)

plot_shaded_dist(table_stats, name = 'FIXME:FIXME', tails = 2)

```

```{r}
# post hoc
fm <- fm_list[[1]]
glht(fm, linfct = paste(names(fm$coefficients), '=0')) |> tidy()
```


```{r}
# scaling up to multiple sheets

file_path <- './FIXME.xlsx'
iter = 1e3
test_tails = 2
remake_entries = T

sheets <- excel_sheets(file_path)

tic('Resampling file')
for(sheet_idx in seq(1, length(sheets))){
  run_msg <- paste0("Processing sheet ", as.character(sheet_idx), '/', 
                                    as.character(length(sheets)))
  print(run_msg)
  tic(run_msg)
  
  sheet = sheets[sheet_idx]
  M <- read_excel(file_path, sheet = sheet)
  
  cache_path = paste0('./results/', sheet, '_fm.rds')
  if ((file.exists(cache_path) & 
       (remake_entries == F))) {
    fm_list <- readRDS(file = cache_path)
  } else {
    fm_list <- resample_anova(M, iter = iter, about = F)
    saveRDS(file = cache_path, object = fm_list)
  }

  table_list <- map(fm_list, tidy)
  table_stats <- as.data.frame(do.call(rbind, map(table_list, function(x){x$statistic})) )
  names(table_stats) <- as.character(unlist(table_list[[1]]['term']))
  
  
  print('a')
  eps = map(names(table_stats), function(x, tails = test_tails){
    obs = table_stats[1, x]
    sim = table_stats[, x]
    ep = calc_ep(obs, sim, tails = tails)
    
    return(ep)
  
  })
  eps = data.frame(Effect = names(table_stats), Empirical.P = unlist(eps))
  eps
  
  write.csv(eps, file = paste(c('./results/', sheet, '_eps.csv'), collapse = ''))
  print('b')
  
  effects_to_plot <- eps[(
    (eps$Effect != "(Intercept)") &
    (eps$Empirical.P < 0.05)), 'Effect']
  
  for( e in effects_to_plot){
    plt <- plot_shaded_dist(table_stats = table_stats, name = e, tails = test_tails)
    ggsave(plot = plt,
           filename = paste(c('./results/', sheet, '_', e,'.pdf'), collapse = ''))
  }
  toc()
}
toc()
```